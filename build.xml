<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://build-resources/stylesheets/ant-documentor.xsl" type="text/xsl" ?>
<?xml-stylesheet href="file://v:/Stylesheets/ant-documentor.xsl" type="text/xsl" ?>
<project name="jbpcc" default="war"  xmlns:ivy="antlib:org.apache.ivy.ant">
    <target name="set-properties" >
        
        <!-- User properties -->
        <property name="name.subproject" value="${ant.project.name}" />
        <property name="war.name" value="${ant.project.name}" />
        <property name="src.dir" location="${basedir}/src/" />
        <property name="res.dir" location="${basedir}/res/" />
        <property name="lib.dir" location="${basedir}/lib/" />
        <property name="conf.dir" location="${basedir}/conf/" />
        <property name="conf.spring.dir" location="${basedir}/conf/spring/" />
        <property name="web.dir" location="${basedir}/web/" />
        <property name="web.webinf.dir" location="${web.dir}/WEB-INF/" />
        <property name="properties.dir" location="${basedir}/properties/" />
        <property name="build.dir" location="${basedir}/build/" />
        <property name="build.classes.dir" location="${build.dir}/classes/" />
        <property name="dist.dir" location="${basedir}/dist/" />
        <property name="schemas.dir" location="${basedir}/schemas/" />
        
        <!-- Unit testing -->
        <property name="test.dir" location="${basedir}/test/" />
        <property name="test.lib.dir" location="${test.dir}/lib" />
        <property name="test.src.dir" location="${test.dir}/src/" />
        <property name="test.classes.dir" location="${build.dir}/classes-test/" />
        <property name="test.report.dir" location="${test.dir}/report/" />
        <property name="test.report.html.dir" location="${test.dir}/report/" />
        <property name="junit.formatter.type" value="xml" />
        <property name="junit.printsummary" value="no" />
        <property name="junit.haltonfailure" value="true" />
        
        <!-- Cobertura code coverage -->
        <property name="build.coverage.report.dir" location="${build.dir}/coverage/" />
        <property name="build.cobertura.datafile" location="${build.dir}/cobertura.ser" />
        <property name="build.instrumented.classes.dir" location="${build.dir}/instrumented-classes/" />
        
        <patternset id="jbpcc.required.jars"
                    includes="
                    commons-beanutils*.jar
                    commons-cli*.jar
                    commons-collections*.jar
                    commons-dbcp*.jar
                    commons-discovery*.jar
                    commons-el*.jar
                    commons-fileupload*.jar
                    commons-lang*.jar
                    commons-logging*.jar
                    commons-pool*.jar
                    commons-digester*.jar 
                    commons-configuration*.jar
                    derby*.jar                    
                    j2ee.jar
                    jaxen-full.jar
                    jdom*.jar
                    log4j*.jar
                    quartz*.jar
                    saxpath*.jar
                    "
        />
        
        <!-- JPA Provider PATH, either toplink or openjpa -->
        <property name="jpa.provider" value="toplink"/>
        
        <patternset id="openjpa" includes="
                    serp-*.jar
                    openjpa-*.jar
                    geronimo-jpa*.jar"
        />
        <patternset id="toplink" includes="toplink*.jar"/>
        
        
        
        <patternset id="common.icefaces.lib.jars.to.include"
                    includes="
                    backport-util-concurrent*.jar
                    icefaces*.jar
                    el-api*.jar
                    el-ri*.jar
                    jstl*.jar
                    xercesImpl*.jar
                    krysalis-jCharts-*.jar
                    xml-apis*.jar"
        >
            <exclude name="el-api*.jar"     if="jsf12" />
            <exclude name="xercesImpl*.jar" if="jsf12" />
            <exclude name="xml-apis*.jar"   if="jsf12" />
        </patternset>
        
        <patternset id="jsf.lib.jars.to.deploy" 
                    includes="jsf-impl*.jar jsf-api*.jar" >
            <exclude name="jsf-api.jar"      if="jsf12" />
            <exclude name="jsf-impl.jar"     if="jsf12" />
            <exclude name="jsf-api-1.2.jar"    unless="jsf12" />
            <exclude name="jsf-impl-1.2.jar"    unless="jsf12" />
            
        </patternset>
        
        
        <patternset id="jbpcc.spring.required.jars"
                    includes="
                    aopalliance.jar
                    ehcache*.jar
                    oscache*.jar
                    spring-*.jar"
        />
        <!-- Compilation classpath -->
        <path id="jbpcc.compile.classpath">
            <pathelement path="${build.classes.dir}" />
            <pathelement path="${core.classes.jar}" />
            <fileset dir="${lib.dir}">
                <patternset refid="jbpcc.required.jars"/>
                <patternset refid="jbpcc.spring.required.jars"/>
                <patternset refid="common.icefaces.lib.jars.to.include"/>
                <patternset refid="jsf.lib.jars.to.deploy"/>
                <patternset refid="${jpa.provider}"/>
            </fileset>
            <!-- fileset dir="${jpa.lib.dir}" includes="**/*.jar"/ -->
        </path>
        
        <!-- Declare classpath for unit testing classes -->
        <path id="test.class.path">
        <path refid="jbpcc.compile.classpath" />
            <pathelement path="${test.classes.dir}" />
            <pathelement path="${res.dir}" />
            <fileset dir="${test.lib.dir}">
                <include name="**/*.jar" />
            </fileset>
        </path>
        
        <patternset id="patternset.properties" >
            <include name="**/*.properties" />
            <include name="**/*.xml" />
            <include name="**/*.xsd" />
            <include name="**/*.dtd" />
        </patternset>
        
        <fileset dir="${properties.dir}" id="jbpcc.properties.fileset">
            <patternset refid="patternset.properties" />
        </fileset>
        
        <fileset id="jbpcc.schemas.sql.fileset" dir="${schemas.dir}">
            <include name="**/*.sql"/>
        </fileset>    
        
        <!-- Cobertura tasks and targets -->
        <taskdef classpathref="test.class.path" resource="tasks.properties" />
    </target>
    
    
    <!--- Clean -->
    <target name="clean-requested" >
        <!-- Just sets  a flag -->
        <property name="clean.required" value="y" />
    </target>
    
    <target name="clean-before-build"
            depends="set-properties"
            if="clean.required"
    >
        <!-- Does a clean-up. This target actually does the work -->
        <echo taskname="Clean">Deleting and cleaning things under  ${build.dir}...
        </echo>
        <delete dir="${build.dir}" quiet="true" />
        <delete dir="${dist.dir}" quiet="true" />
        <delete dir="${test.classes.dir}" quiet="true" />
        <delete dir="${test.report.dir}" quiet="true" />
        <delete dir="${basedir}/target" quiet="true" />
    </target>
    
    <target name="clean"
            description="Clears build files"
            depends="clean-requested, set-properties, clean-before-build">
        <!--
        Inside this target may assume the following:
            * set-properties has been invoked. Anything it needs to set has been set
            * The initialised directories are present. If they needed cleaning, this has already taken place
        -->
    </target>
    
    
    <target name="resolve-dependency" description="--> retreive dependencies with ivy">
        <ivy:retrieve/>
    </target>
    
    
    <!-- Initialisation -->
    <target name="init"
            depends="set-properties, clean-before-build"
            description="Creates build directory structure" >
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${basedir}/target" />
    </target>
    
    
    
    <!-- Compile the source code -->
    <target name="compile" depends="set-properties, init, resolve-dependency, preProcessJPABoolean">
        <!-- Copy all the source code from the source to target -->
        <!-- exclude all the Model class -->
        <copy todir="${basedir}/target">
            <fileset dir="./src">
                <exclude name="org/jbpcc/domain/model/*.java"/>
            </fileset>
        </copy>
        
        
        <condition property="compile.debug" value="true" else="false">
            <isset property="coverage.report" />
        </condition>
        <javac debug="${compile.debug}" srcdir="${basedir}/target" destdir="${build.classes.dir}">
            <classpath refid="jbpcc.compile.classpath" />
        </javac>
    </target>
    
    <target name="compileJPABooleanProcessorFactory" depends="set-properties, init, resolve-dependency">
        <javac srcdir="./src" destdir="${build.classes.dir}">
            <classpath refid="jbpcc.compile.classpath" />
            <include name="**/BooleanMagic*.java"/>
        </javac>
    </target>
    
    <target name="build" depends="set-properties, war" />
    
    <!-- Build the war file -->
    <target name="war-init"
            depends="set-properties, init, compile"
            if="dist.dir"
    >
        
        <!-- This one is under the parent project's dist tree -->
        <property name="jbpcc.installer.file" location="${dist.dir}/${war.name}.war" />
        <delete file="${jbpcc.installer.file}" />
    </target>
    
    <!-- Compile the JPABoolean Annotation Processor Factory -->
    <target name="buildJPABoolenProcessorFactory" depends="set-properties, init, compileJPABooleanProcessorFactory">
        <jar destfile="${dist.dir}/BooleanMagicProcessorFactory.jar"
             basedir="${build.classes.dir}"
             includes="**/BooleanMagic*.class"
        />
    </target>
    
    <target name="preProcessJPABoolean" depends="buildJPABoolenProcessorFactory">
        <apt srcdir="${src.dir}/org/jbpcc/domain/model/"
             destdir="${build.classes.dir}"
             classpath="./dist/BooleanMagicProcessorFactory.jar:./lib/toplink-essentials.jar:./lib/commons-lang-2.3.jar"
             debug="on"    
             compile="false"
             factory="org.jbpcc.util.jpa.BooleanMagicProcessorFactory"
             preprocessdir="${basedir}/target">
        </apt>
    </target>
    
    <target name="war-core"
            depends="war-init"
    >
        <!-- -->
        <war destfile="${jbpcc.installer.file}"
             webxml="${web.webinf.dir}/web.xml"
        >
            
            <!-- Web Admin configuration -->
            <webinf prefix="WEB-INF" dir="${conf.dir}" />
            
            <!-- Needed properties -->
            <webinf prefix="WEB-INF/properties" refid="jbpcc.properties.fileset" />
            
            <webinf prefix="WEB-INF/schemas" refid="jbpcc.schemas.sql.fileset" />
            
            <!-- Resource bundles -->
            <webinf prefix="WEB-INF/classes/resources" dir="${res.dir}">
                <include name="**/*.properties" />
            </webinf>
            
            
            <!-- Required libraries -->
            <lib dir="${lib.dir}" >
                <patternset refid="jbpcc.required.jars" />
                <exclude name="j2ee.jar" />
                <patternset refid="jbpcc.spring.required.jars" />
                <patternset refid="common.icefaces.lib.jars.to.include" />
                <patternset refid="jsf.lib.jars.to.deploy" />
                <patternset refid="${jpa.provider}" />
            </lib>
            
            <!-- The actual pages and view snippets -->
            <zipfileset dir="${web.dir}">
                <!-- Exclude WEB-INF out by default -->
                <exclude name="WEB-INF/**" />
            </zipfileset>
            
            <!-- The real WEB-INF files -->
            <webinf dir="${web.dir}/WEB-INF" includes="**, *.tld, *.dtd, *.xml" >
                <exclude name="web.xml" />
                <exclude name="properties/**/*.*" />
            </webinf>
            <!-- Web Admin classes -->
            <classes dir="${build.classes.dir}" />
        </war>
    </target>
    
    <target name="war"
            depends="war-init, war-core"
            description="Build the deployable WAR file" >
    </target>
    
    
    <!-- unit testing -->
    <target name="compile-tests" depends="compile">
        <mkdir dir="${test.classes.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}"
               classpathref="test.class.path"
               failonerror="true" />
    </target>
    
    <target name="test" depends="compile, compile-tests, instrument"
            description="Run the unit tests">
        <condition property="test.class.pattern" value="**/${test.this.class}.java" else="**/*Test.java">
            <isset property="test.this.class" />
        </condition>
        <mkdir dir="${test.report.dir}" />
        <junit printsummary="${junit.printsummary}" haltonfailure="${junit.haltonfailure}"
               fork="true" forkmode="perBatch">
            <sysproperty key="net.sourceforge.cobertura.datafile" value="${build.cobertura.datafile}"/>
            <classpath location="${build.instrumented.classes.dir}" />
            <classpath refid="test.class.path" />
            <formatter type="${junit.formatter.type}" />
            <batchtest fork="yes" todir="${test.report.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="${test.class.pattern}" />
                    <exclude name="**/All*Tests.java" />
                    <exclude name="**/Abstract*Test.java" />
                </fileset>
            </batchtest>
        </junit>
        <mkdir dir="${test.report.html.dir}" />
        <junitreport todir="${test.report.dir}">
            <fileset dir="${test.report.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${test.report.html.dir}" format="frames" />
        </junitreport>
    </target>
    
    <target name="instrument" depends="set-properties, compile"
            if="coverage.report">
        <cobertura-instrument todir="${build.instrumented.classes.dir}" datafile="${build.cobertura.datafile}">
            <ignore regex="org.apache.log4j.*" />
            <fileset dir="${build.classes.dir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
    </target>
    
    <target name="coverage" depends="p-coverage-report, set-properties, test"
            description="Generate test coverage report">
        <cobertura-report srcdir="${src.dir}" destdir="${build.coverage.report.dir}"
                          datafile="${build.cobertura.datafile}" />
    </target>
    
    <target name="p-coverage-report">
        <property name="coverage.report" value="true" />
    </target>
    
    <target name="clean-cobertura"
            depends="set-properties"
            description="Removes all cobertura output.">
        <delete dir="${build.coverage.report.dir}" quiet="true" />
        <delete dir="${build.instrumented.classes.dir}" quiet="true" />
        <delete file="${build.cobertura.datafile}" quiet="true" />
    </target>
    
</project>
